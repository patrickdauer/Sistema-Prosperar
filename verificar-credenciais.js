// Script para verificar e validar as credenciais da conta de servi√ßo
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function verificarCredenciais() {
  try {
    console.log('üîç Verificando arquivo de credenciais...');
    
    const serviceAccountPath = path.join(__dirname, 'tanamao-464721-fabfbca1450e.json');
    
    if (!fs.existsSync(serviceAccountPath)) {
      console.log('‚ùå Arquivo de credenciais n√£o encontrado:', serviceAccountPath);
      return false;
    }
    
    const rawData = fs.readFileSync(serviceAccountPath, 'utf8');
    const credentials = JSON.parse(rawData);
    
    console.log('‚úÖ Arquivo encontrado e √© um JSON v√°lido');
    console.log('üìß Email da conta:', credentials.client_email);
    console.log('üÜî Project ID:', credentials.project_id);
    console.log('üîë Private Key ID:', credentials.private_key_id);
    
    // Verificar campos obrigat√≥rios
    const requiredFields = [
      'type', 'project_id', 'private_key_id', 'private_key', 
      'client_email', 'client_id', 'auth_uri', 'token_uri'
    ];
    
    const missingFields = requiredFields.filter(field => !credentials[field]);
    
    if (missingFields.length > 0) {
      console.log('‚ùå Campos obrigat√≥rios ausentes:', missingFields);
      return false;
    }
    
    console.log('‚úÖ Todos os campos obrigat√≥rios est√£o presentes');
    
    // Verificar se a chave privada est√° no formato correto
    if (!credentials.private_key.includes('-----BEGIN PRIVATE KEY-----')) {
      console.log('‚ùå Chave privada n√£o est√° no formato correto');
      return false;
    }
    
    console.log('‚úÖ Chave privada est√° no formato correto');
    
    // Verificar se o tipo √© service_account
    if (credentials.type !== 'service_account') {
      console.log('‚ùå Tipo de credencial incorreto:', credentials.type);
      return false;
    }
    
    console.log('‚úÖ Tipo de credencial correto: service_account');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar credenciais:', error.message);
    return false;
  }
}

function gerarInstrucoes() {
  console.log('\nüîß SOLU√á√ÉO RECOMENDADA:');
  console.log('1. O arquivo de credenciais pode estar corrompido ou desatualizado');
  console.log('2. Vamos regenerar as credenciais da conta de servi√ßo');
  console.log('\nüìã PASSOS PARA REGENERAR:');
  console.log('1. Acesse: https://console.cloud.google.com/iam-admin/serviceaccounts');
  console.log('2. Selecione o projeto: tanamao-464721');
  console.log('3. Encontre a conta: sistema-interno-contabilid-169@tanamao-464721.iam.gserviceaccount.com');
  console.log('4. Clique nos 3 pontos ‚Üí "Gerenciar chaves"');
  console.log('5. Clique em "Adicionar chave" ‚Üí "Criar nova chave"');
  console.log('6. Selecione "JSON" e baixe');
  console.log('7. Substitua o arquivo tanamao-464721-fabfbca1450e.json pelo novo');
  console.log('\nüí° Ou podemos criar uma nova conta de servi√ßo completamente nova');
}

// Executar verifica√ß√£o
const isValid = verificarCredenciais();

if (!isValid) {
  gerarInstrucoes();
  process.exit(1);
} else {
  console.log('\n‚úÖ CREDENCIAIS V√ÅLIDAS');
  console.log('ü§î O problema pode ser:');
  console.log('1. As permiss√µes ainda est√£o se propagando (aguarde 5-10 minutos)');
  console.log('2. A conta de servi√ßo precisa ser reativada no Google Cloud Console');
  console.log('3. O rel√≥gio do sistema pode estar dessincronizado');
  
  console.log('\n‚è∞ Aguarde alguns minutos e teste novamente, ou regenere as credenciais');
  process.exit(0);
}